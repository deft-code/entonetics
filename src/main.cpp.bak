#include <SFML/Graphics.hpp>
#include <Box2D.h>
#include <cstdlib>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <sstream>

#include "Animation.hpp"

void Draw( sf::RenderWindow& app, b2Body* b, b2Shape* s, const sf::Color& c )
{
	if( s->GetType() == e_polygonShape )
	{
		b2PolygonShape* poly =
			reinterpret_cast<b2PolygonShape*>( s );
		sf::Shape shape;
		const b2Vec2* points = poly->GetVertices();
		for( unsigned i=0; i<poly->GetVertexCount(); ++i )
		{
			b2Vec2 tmp = b->GetWorldPoint( points[i] );
			shape.AddPoint( sf::Vector2f( tmp.x, -tmp.y), c );
		}
		app.Draw(shape);
	}
	else
	{

		b2CircleShape* circle = 
			reinterpret_cast<b2CircleShape*>( s );
		b2Vec2 tmp = b->GetWorldPoint(circle->GetLocalPosition());
		app.Draw( sf::Shape::Circle( sf::Vector2f( tmp.x, -tmp.y ),
						circle->GetRadius(), c ) ); 
	}
}

void Draw( sf::RenderWindow& app, b2Body* b, const sf::Color& c )
{
	for( b2Shape* s = b->GetShapeList(); s; s = s->GetNext() )
	{
		Draw( app, b, s, c );
	}
}

int main()
{
	b2AABB worldAABB;
	worldAABB.lowerBound.Set(-1000.f,-1000.f);
	worldAABB.upperBound.Set(1000.f,1000.f);

	b2World world( worldAABB, b2Vec2(0.f,-100.f), true );

	b2BodyDef groundDef;

	groundDef.position.Set(0.f,100.f);
	b2Body* ground1 = world.CreateStaticBody(&groundDef);

	groundDef.position.Set(300.f,300.f);
	b2Body* ground2 = world.CreateStaticBody(&groundDef);

	groundDef.position.Set(-300.f,300.f);
	b2Body* ground3 = world.CreateStaticBody(&groundDef);

	b2PolygonDef groundShapeDef;
	groundShapeDef.restitution = 0.2;

	groundShapeDef.SetAsBox(390.f,10.f);
	ground1->CreateShape(&groundShapeDef);
	
	groundShapeDef.SetAsBox(10.f,290.f);
	ground2->CreateShape(&groundShapeDef);
	ground3->CreateShape(&groundShapeDef);

	std::vector<b2Body*> bodies;
	
	b2BodyDef bodyDef;
	bodyDef.position.Set(100,200);

	b2CircleDef shapeDef;
	shapeDef.radius = 5;
	shapeDef.restitution = 0.2;
	shapeDef.density = 1;
	shapeDef.friction = 0.f;

	// Create the main rendering window
	sf::RenderWindow App(sf::VideoMode(800, 600, 32), "Entonetics");
	sf::View v( sf::FloatRect(-400,-600,400,0), 1.f );
	App.SetView( &v );

	sf::Font font;
	font.LoadFromFile( "data/fonts/NEUROPOL.TTF" );
	sf::String rate;
	rate.SetText( "Neuropol");
	rate.SetFont( font );//sf::Font::GetDefaultFont() );
	rate.SetColor( sf::Color::White );
	rate.Move( sf::Vector2f(0, -400) );

	ento::Animation anim;

	std::vector<sf::Image> images;
	images.resize(26);
	std::ostringstream oss;
	for( unsigned i=0; i<26; ++i )
	{
		oss.str("");
		oss.fill('0');
		oss << "data/graphics/nuke/nuke2_";
		oss.width(2);
		oss << i+1 << ".tga";
		images[i].LoadFromFile( oss.str() );

		sf::Sprite s;
		s.SetImage( images[i] );
		s.SetPosition( sf::Vector2f(0, -300) );
		anim.addSprite(s);
		anim.addSequence( i, 0.09 );
	}

	sf::Sprite spr;
	spr.SetImage( images[4] );
	spr.SetPosition( sf::Vector2f(-100,-300) );
	sf::Vector2f vec = spr.GetSize();
	vec.x /= 2;
	vec.y /= 2;
	spr.SetCenter( vec );

	anim.setLifeTime( anim.fullTime() );

	std::wostringstream woss;
	woss << std::fixed;

	float delta = 0;
	float frame_delta = 0;
	unsigned frame_count = 0;
	sf::Shape s = sf::Shape::Rectangle( sf::Vector2f(50,90), sf::Vector2f(150,110), sf::Color::Blue );
	bool done = false;
	bool draw = true;
	while( !done )  
	{
		// Process events
		sf::Event e;
		while (App.GetEvent(e))
		{
			switch( e.Type )
			{
				case sf::Event::Closed:
					done = true;
					break;
				case sf::Event::KeyPressed:
					switch( e.Key.Code )
					{
						case sf::Key::Space:
							//body->ApplyImpulse( b2Vec2( 0, 1000), body->GetWorldCenter() );
							break;
						case sf::Key::J:
							//body->ApplyForce( b2Vec2( 0, 1000), body->GetWorldCenter() );
							break;
						case sf::Key::Escape:
						case sf::Key::Q:
							done = true;
							break;
						case sf::Key::B:
							bodies.push_back( world.CreateDynamicBody(&bodyDef) );
							bodies.back()->CreateShape(&shapeDef);
							bodies.back()->SetMassFromShapes();
							break;
						case sf::Key::Left:
							bodyDef.position.x -= 1;
						case sf::Key::R:
							spr.SetRotation( spr.GetRotation() + 10 );
							break;
						case sf::Key::A:
							draw = true;
							break;
					}
					break;
			}

		}

		Draw(App, ground1, sf::Color::Blue);
		Draw(App, ground2, sf::Color::Blue);
		Draw(App, ground3, sf::Color::Blue);

		for( unsigned i=0; i<bodies.size(); ++i )
		{
			if( bodies[i]->IsSleeping() )
			{
				Draw( App, bodies[i], sf::Color::Green );
			}
			else
			{
				Draw( App, bodies[i], sf::Color::Red );
			}
		}


		frame_delta += App.GetFrameTime();
		frame_count += 1;
		if( frame_delta > 1 )
		{
			woss.str( L"" );
			woss << bodies.size() << L" : " << frame_count;
			frame_count = 0;
			frame_delta -= 1;
			rate.SetText( woss.str() );
		}

		App.Draw(rate);

		if( draw )
		{
			draw = anim.update( App.GetFrameTime() );
			App.Draw( anim.currentSprite() );
		}

		App.Draw(spr);

		// Display window contents on screen
		App.Display();

		delta += App.GetFrameTime();
		while( delta > 1.f/20.f )
		{
			delta -= 1.f/20.f;
			world.Step( 1.f/20.f, 10 );
		}
	}
	return EXIT_SUCCESS;
}
